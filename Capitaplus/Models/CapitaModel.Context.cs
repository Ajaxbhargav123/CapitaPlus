//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Capitaplus.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CapitaplusEntities : DbContext
    {
        public CapitaplusEntities()
            : base("name=CapitaplusEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillOfMat> BillOfMats { get; set; }
        public virtual DbSet<BrandMaster> BrandMasters { get; set; }
        public virtual DbSet<CellTypeMaster> CellTypeMasters { get; set; }
        public virtual DbSet<CheckMatToDisplay> CheckMatToDisplays { get; set; }
        public virtual DbSet<ColorMaster> ColorMasters { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<DeliverySchedule> DeliverySchedules { get; set; }
        public virtual DbSet<FGstock> FGstocks { get; set; }
        public virtual DbSet<FinishedGood> FinishedGoods { get; set; }
        public virtual DbSet<Grn> Grns { get; set; }
        public virtual DbSet<JobSheet> JobSheets { get; set; }
        public virtual DbSet<MasterPackingType> MasterPackingTypes { get; set; }
        public virtual DbSet<MaterialRequsitionSlip> MaterialRequsitionSlips { get; set; }
        public virtual DbSet<MatIssueSlip> MatIssueSlips { get; set; }
        public virtual DbSet<MatPlanning> MatPlannings { get; set; }
        public virtual DbSet<ModelMaster> ModelMasters { get; set; }
        public virtual DbSet<POType> POTypes { get; set; }
        public virtual DbSet<ProductMaster> ProductMasters { get; set; }
        public virtual DbSet<PurchaseOrderSummary> PurchaseOrderSummaries { get; set; }
        public virtual DbSet<QualityCheck> QualityChecks { get; set; }
        public virtual DbSet<RoleMaterialCreation> RoleMaterialCreations { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrdersPacking> SalesOrdersPackings { get; set; }
        public virtual DbSet<StatusYesNo> StatusYesNoes { get; set; }
        public virtual DbSet<StockTable> StockTables { get; set; }
        public virtual DbSet<SuplierType> SuplierTypes { get; set; }
        public virtual DbSet<VendorMaster> VendorMasters { get; set; }
        public virtual DbSet<WIP> WIPs { get; set; }
    
        public virtual ObjectResult<GetAllFromFg_Result> GetAllFromFg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllFromFg_Result>("GetAllFromFg");
        }
    
        public virtual ObjectResult<getAllTypeQtyFromMatPlanning_Result> getAllTypeQtyFromMatPlanning(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTypeQtyFromMatPlanning_Result>("getAllTypeQtyFromMatPlanning", codeParameter);
        }
    
        public virtual ObjectResult<getjobsheet_Result> getjobsheet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getjobsheet_Result>("getjobsheet");
        }
    
        public virtual int sp_AddBom(Nullable<int> id, string code, string materialName, string type, string capacity_AMH, string color, string model, string masterCode, Nullable<int> qty)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var masterCodeParameter = masterCode != null ?
                new ObjectParameter("masterCode", masterCode) :
                new ObjectParameter("masterCode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddBom", idParameter, codeParameter, materialNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, masterCodeParameter, qtyParameter);
        }
    
        public virtual int sp_AddCheckMat(Nullable<int> id, string jonno, string bomno, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> tQty, string brand)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tQtyParameter = tQty.HasValue ?
                new ObjectParameter("TQty", tQty) :
                new ObjectParameter("TQty", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddCheckMat", idParameter, jonnoParameter, bomnoParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, tQtyParameter, brandParameter);
        }
    
        public virtual int sp_AddCustomerSalesOrder(Nullable<int> id, string orderType, string paymentTerm, Nullable<int> creditPeriod, Nullable<int> custId, string customerName, string address, string contactNo, string contactPer, string brand, Nullable<int> soQty, Nullable<int> stock, Nullable<int> amount, Nullable<int> totalAmt, Nullable<int> grossAmt, Nullable<int> totalGrossAmt, Nullable<int> rate, Nullable<int> updatedProduceQty, string code, string productName, string type, string capacity_AMH, string color, string model, string salesOrderNo, Nullable<int> qtytofreez, Nullable<int> qtytoproduce)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("orderType", orderType) :
                new ObjectParameter("orderType", typeof(string));
    
            var paymentTermParameter = paymentTerm != null ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(string));
    
            var creditPeriodParameter = creditPeriod.HasValue ?
                new ObjectParameter("CreditPeriod", creditPeriod) :
                new ObjectParameter("CreditPeriod", typeof(int));
    
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("contactNo", contactNo) :
                new ObjectParameter("contactNo", typeof(string));
    
            var contactPerParameter = contactPer != null ?
                new ObjectParameter("contactPer", contactPer) :
                new ObjectParameter("contactPer", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var soQtyParameter = soQty.HasValue ?
                new ObjectParameter("soQty", soQty) :
                new ObjectParameter("soQty", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var totalAmtParameter = totalAmt.HasValue ?
                new ObjectParameter("totalAmt", totalAmt) :
                new ObjectParameter("totalAmt", typeof(int));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("grossAmt", grossAmt) :
                new ObjectParameter("grossAmt", typeof(int));
    
            var totalGrossAmtParameter = totalGrossAmt.HasValue ?
                new ObjectParameter("totalGrossAmt", totalGrossAmt) :
                new ObjectParameter("totalGrossAmt", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(int));
    
            var updatedProduceQtyParameter = updatedProduceQty.HasValue ?
                new ObjectParameter("updatedProduceQty", updatedProduceQty) :
                new ObjectParameter("updatedProduceQty", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("salesOrderNo", salesOrderNo) :
                new ObjectParameter("salesOrderNo", typeof(string));
    
            var qtytofreezParameter = qtytofreez.HasValue ?
                new ObjectParameter("qtytofreez", qtytofreez) :
                new ObjectParameter("qtytofreez", typeof(int));
    
            var qtytoproduceParameter = qtytoproduce.HasValue ?
                new ObjectParameter("qtytoproduce", qtytoproduce) :
                new ObjectParameter("qtytoproduce", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddCustomerSalesOrder", idParameter, orderTypeParameter, paymentTermParameter, creditPeriodParameter, custIdParameter, customerNameParameter, addressParameter, contactNoParameter, contactPerParameter, brandParameter, soQtyParameter, stockParameter, amountParameter, totalAmtParameter, grossAmtParameter, totalGrossAmtParameter, rateParameter, updatedProduceQtyParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, salesOrderNoParameter, qtytofreezParameter, qtytoproduceParameter);
        }
    
        public virtual int sp_AddDeliverySchedule(Nullable<int> id, Nullable<int> custId, string code, string productName, string type, string capacity_AMH, string color, string model, string deliveryDate, string addressDelivery, Nullable<int> qtyDelivery, string salesOrderNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var deliveryDateParameter = deliveryDate != null ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(string));
    
            var addressDeliveryParameter = addressDelivery != null ?
                new ObjectParameter("AddressDelivery", addressDelivery) :
                new ObjectParameter("AddressDelivery", typeof(string));
    
            var qtyDeliveryParameter = qtyDelivery.HasValue ?
                new ObjectParameter("QtyDelivery", qtyDelivery) :
                new ObjectParameter("QtyDelivery", typeof(int));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("salesOrderNo", salesOrderNo) :
                new ObjectParameter("salesOrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddDeliverySchedule", idParameter, custIdParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, deliveryDateParameter, addressDeliveryParameter, qtyDeliveryParameter, salesOrderNoParameter);
        }
    
        public virtual int sp_AddFgGoods(Nullable<int> id, string customerName, string brand, Nullable<int> stock, string selfstock, Nullable<int> stockfrezz, string stockType, string trfselg, Nullable<int> rate, Nullable<int> max, Nullable<int> min, Nullable<int> gst, Nullable<int> cid, string code, string productName, string type, string capacity_AMH, string color, string model, string shortProCode, string shortColorCode, string shortBrandCode, string sac, string uom, string isMinMax)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            var selfstockParameter = selfstock != null ?
                new ObjectParameter("selfstock", selfstock) :
                new ObjectParameter("selfstock", typeof(string));
    
            var stockfrezzParameter = stockfrezz.HasValue ?
                new ObjectParameter("stockfrezz", stockfrezz) :
                new ObjectParameter("stockfrezz", typeof(int));
    
            var stockTypeParameter = stockType != null ?
                new ObjectParameter("stockType", stockType) :
                new ObjectParameter("stockType", typeof(string));
    
            var trfselgParameter = trfselg != null ?
                new ObjectParameter("trfselg", trfselg) :
                new ObjectParameter("trfselg", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(int));
    
            var maxParameter = max.HasValue ?
                new ObjectParameter("max", max) :
                new ObjectParameter("max", typeof(int));
    
            var minParameter = min.HasValue ?
                new ObjectParameter("min", min) :
                new ObjectParameter("min", typeof(int));
    
            var gstParameter = gst.HasValue ?
                new ObjectParameter("gst", gst) :
                new ObjectParameter("gst", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var shortProCodeParameter = shortProCode != null ?
                new ObjectParameter("shortProCode", shortProCode) :
                new ObjectParameter("shortProCode", typeof(string));
    
            var shortColorCodeParameter = shortColorCode != null ?
                new ObjectParameter("shortColorCode", shortColorCode) :
                new ObjectParameter("shortColorCode", typeof(string));
    
            var shortBrandCodeParameter = shortBrandCode != null ?
                new ObjectParameter("shortBrandCode", shortBrandCode) :
                new ObjectParameter("shortBrandCode", typeof(string));
    
            var sacParameter = sac != null ?
                new ObjectParameter("sac", sac) :
                new ObjectParameter("sac", typeof(string));
    
            var uomParameter = uom != null ?
                new ObjectParameter("uom", uom) :
                new ObjectParameter("uom", typeof(string));
    
            var isMinMaxParameter = isMinMax != null ?
                new ObjectParameter("IsMinMax", isMinMax) :
                new ObjectParameter("IsMinMax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddFgGoods", idParameter, customerNameParameter, brandParameter, stockParameter, selfstockParameter, stockfrezzParameter, stockTypeParameter, trfselgParameter, rateParameter, maxParameter, minParameter, gstParameter, cidParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, shortProCodeParameter, shortColorCodeParameter, shortBrandCodeParameter, sacParameter, uomParameter, isMinMaxParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AddFGStocks(Nullable<int> id, string orderType, string paymentTerm, string creditPeriod, Nullable<int> cid, string customerName, string address, string contactNo, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> qty, string brand, string rate, Nullable<int> tQtyProduce, Nullable<int> fgInStockt, Nullable<int> qtytopro, Nullable<int> qtyToFreez, Nullable<bool> isFreez)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("orderType", orderType) :
                new ObjectParameter("orderType", typeof(string));
    
            var paymentTermParameter = paymentTerm != null ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(string));
    
            var creditPeriodParameter = creditPeriod != null ?
                new ObjectParameter("CreditPeriod", creditPeriod) :
                new ObjectParameter("CreditPeriod", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("Cid", cid) :
                new ObjectParameter("Cid", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("customerName", customerName) :
                new ObjectParameter("customerName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("contactNo", contactNo) :
                new ObjectParameter("contactNo", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var rateParameter = rate != null ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(string));
    
            var tQtyProduceParameter = tQtyProduce.HasValue ?
                new ObjectParameter("TQtyProduce", tQtyProduce) :
                new ObjectParameter("TQtyProduce", typeof(int));
    
            var fgInStocktParameter = fgInStockt.HasValue ?
                new ObjectParameter("fgInStockt", fgInStockt) :
                new ObjectParameter("fgInStockt", typeof(int));
    
            var qtytoproParameter = qtytopro.HasValue ?
                new ObjectParameter("qtytopro", qtytopro) :
                new ObjectParameter("qtytopro", typeof(int));
    
            var qtyToFreezParameter = qtyToFreez.HasValue ?
                new ObjectParameter("qtyToFreez", qtyToFreez) :
                new ObjectParameter("qtyToFreez", typeof(int));
    
            var isFreezParameter = isFreez.HasValue ?
                new ObjectParameter("IsFreez", isFreez) :
                new ObjectParameter("IsFreez", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AddFGStocks", idParameter, orderTypeParameter, paymentTermParameter, creditPeriodParameter, cidParameter, customerNameParameter, addressParameter, contactNoParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, qtyParameter, brandParameter, rateParameter, tQtyProduceParameter, fgInStocktParameter, qtytoproParameter, qtyToFreezParameter, isFreezParameter);
        }
    
        public virtual int sp_AddGrnOrder(Nullable<int> id, string code, string materialName, string uOM1, string type, string capacity_AMH, string color, string model, Nullable<int> qty, Nullable<int> recive, Nullable<int> amount, string vendorN, Nullable<int> vendorId, string purchaseId, string grnId, Nullable<System.DateTime> entryDate, Nullable<System.DateTime> recieveDate, string gateno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var uOM1Parameter = uOM1 != null ?
                new ObjectParameter("UOM1", uOM1) :
                new ObjectParameter("UOM1", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var reciveParameter = recive.HasValue ?
                new ObjectParameter("recive", recive) :
                new ObjectParameter("recive", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var vendorNParameter = vendorN != null ?
                new ObjectParameter("vendorN", vendorN) :
                new ObjectParameter("vendorN", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var purchaseIdParameter = purchaseId != null ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(string));
    
            var grnIdParameter = grnId != null ?
                new ObjectParameter("grnId", grnId) :
                new ObjectParameter("grnId", typeof(string));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("entryDate", entryDate) :
                new ObjectParameter("entryDate", typeof(System.DateTime));
    
            var recieveDateParameter = recieveDate.HasValue ?
                new ObjectParameter("recieveDate", recieveDate) :
                new ObjectParameter("recieveDate", typeof(System.DateTime));
    
            var gatenoParameter = gateno != null ?
                new ObjectParameter("gateno", gateno) :
                new ObjectParameter("gateno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddGrnOrder", idParameter, codeParameter, materialNameParameter, uOM1Parameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, qtyParameter, reciveParameter, amountParameter, vendorNParameter, vendorIdParameter, purchaseIdParameter, grnIdParameter, entryDateParameter, recieveDateParameter, gatenoParameter);
        }
    
        public virtual int sp_AddJobSheet(Nullable<int> id, string code, string materialName, string jobno, string bomno, string salesNo, string type, string brand, string capacity_AMH, string color, string model, Nullable<int> qtytopro, string qtyinpic, Nullable<int> totalQty)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var salesNoParameter = salesNo != null ?
                new ObjectParameter("salesNo", salesNo) :
                new ObjectParameter("salesNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var qtytoproParameter = qtytopro.HasValue ?
                new ObjectParameter("Qtytopro", qtytopro) :
                new ObjectParameter("Qtytopro", typeof(int));
    
            var qtyinpicParameter = qtyinpic != null ?
                new ObjectParameter("qtyinpic", qtyinpic) :
                new ObjectParameter("qtyinpic", typeof(string));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("totalQty", totalQty) :
                new ObjectParameter("totalQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddJobSheet", idParameter, codeParameter, materialNameParameter, jobnoParameter, bomnoParameter, salesNoParameter, typeParameter, brandParameter, capacity_AMHParameter, colorParameter, modelParameter, qtytoproParameter, qtyinpicParameter, totalQtyParameter);
        }
    
        public virtual int sp_AddMatIssueSlip(Nullable<int> id, string jonno, string bomno, string mrsno, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> qtyinPiece, Nullable<int> ytd, Nullable<int> balQty, Nullable<int> issueQty, string date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var mrsnoParameter = mrsno != null ?
                new ObjectParameter("mrsno", mrsno) :
                new ObjectParameter("mrsno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var qtyinPieceParameter = qtyinPiece.HasValue ?
                new ObjectParameter("QtyinPiece", qtyinPiece) :
                new ObjectParameter("QtyinPiece", typeof(int));
    
            var ytdParameter = ytd.HasValue ?
                new ObjectParameter("ytd", ytd) :
                new ObjectParameter("ytd", typeof(int));
    
            var balQtyParameter = balQty.HasValue ?
                new ObjectParameter("balQty", balQty) :
                new ObjectParameter("balQty", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("issueQty", issueQty) :
                new ObjectParameter("issueQty", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMatIssueSlip", idParameter, jonnoParameter, bomnoParameter, mrsnoParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, qtyinPieceParameter, ytdParameter, balQtyParameter, issueQtyParameter, dateParameter);
        }
    
        public virtual int sp_AddMis(Nullable<int> id, string jonno, string bomno, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> tQty, Nullable<int> qtyreq, Nullable<int> qtyinstock, Nullable<int> qtytopro, string mrsno, Nullable<int> waste, Nullable<int> qtyAfterWsste, string salesno)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tQtyParameter = tQty.HasValue ?
                new ObjectParameter("TQty", tQty) :
                new ObjectParameter("TQty", typeof(int));
    
            var qtyreqParameter = qtyreq.HasValue ?
                new ObjectParameter("Qtyreq", qtyreq) :
                new ObjectParameter("Qtyreq", typeof(int));
    
            var qtyinstockParameter = qtyinstock.HasValue ?
                new ObjectParameter("qtyinstock", qtyinstock) :
                new ObjectParameter("qtyinstock", typeof(int));
    
            var qtytoproParameter = qtytopro.HasValue ?
                new ObjectParameter("qtytopro", qtytopro) :
                new ObjectParameter("qtytopro", typeof(int));
    
            var mrsnoParameter = mrsno != null ?
                new ObjectParameter("mrsno", mrsno) :
                new ObjectParameter("mrsno", typeof(string));
    
            var wasteParameter = waste.HasValue ?
                new ObjectParameter("waste", waste) :
                new ObjectParameter("waste", typeof(int));
    
            var qtyAfterWssteParameter = qtyAfterWsste.HasValue ?
                new ObjectParameter("qtyAfterWsste", qtyAfterWsste) :
                new ObjectParameter("qtyAfterWsste", typeof(int));
    
            var salesnoParameter = salesno != null ?
                new ObjectParameter("salesno", salesno) :
                new ObjectParameter("salesno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMis", idParameter, jonnoParameter, bomnoParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, tQtyParameter, qtyreqParameter, qtyinstockParameter, qtytoproParameter, mrsnoParameter, wasteParameter, qtyAfterWssteParameter, salesnoParameter);
        }
    
        public virtual int sp_AddMislip(Nullable<int> id, string sales, string jonno, string bomno, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> tQty, Nullable<int> actualQty, Nullable<int> wastage, Nullable<int> reqWasteqty, Nullable<int> reqQty, Nullable<int> balQtyReq, string mrsno, string dates)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var salesParameter = sales != null ?
                new ObjectParameter("sales", sales) :
                new ObjectParameter("sales", typeof(string));
    
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tQtyParameter = tQty.HasValue ?
                new ObjectParameter("TQty", tQty) :
                new ObjectParameter("TQty", typeof(int));
    
            var actualQtyParameter = actualQty.HasValue ?
                new ObjectParameter("ActualQty", actualQty) :
                new ObjectParameter("ActualQty", typeof(int));
    
            var wastageParameter = wastage.HasValue ?
                new ObjectParameter("wastage", wastage) :
                new ObjectParameter("wastage", typeof(int));
    
            var reqWasteqtyParameter = reqWasteqty.HasValue ?
                new ObjectParameter("ReqWasteqty", reqWasteqty) :
                new ObjectParameter("ReqWasteqty", typeof(int));
    
            var reqQtyParameter = reqQty.HasValue ?
                new ObjectParameter("ReqQty", reqQty) :
                new ObjectParameter("ReqQty", typeof(int));
    
            var balQtyReqParameter = balQtyReq.HasValue ?
                new ObjectParameter("BalQtyReq", balQtyReq) :
                new ObjectParameter("BalQtyReq", typeof(int));
    
            var mrsnoParameter = mrsno != null ?
                new ObjectParameter("mrsno", mrsno) :
                new ObjectParameter("mrsno", typeof(string));
    
            var datesParameter = dates != null ?
                new ObjectParameter("dates", dates) :
                new ObjectParameter("dates", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMislip", idParameter, salesParameter, jonnoParameter, bomnoParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, tQtyParameter, actualQtyParameter, wastageParameter, reqWasteqtyParameter, reqQtyParameter, balQtyReqParameter, mrsnoParameter, datesParameter);
        }
    
        public virtual int sp_AddPurchaseOrder(Nullable<int> id, string code, string materialName, string materialGroup, string uOM1, string type, string capacity_AMH, string color, string model, Nullable<int> qty, string sac, Nullable<int> amount, Nullable<int> fridge, string grossAmount, string grossTotal, string netAmount, Nullable<int> gstAmt, Nullable<int> gstTotal, string vendorN, Nullable<int> vendorId, string purchaseId, Nullable<int> rate, Nullable<int> quantity, Nullable<int> potype, Nullable<System.DateTime> entyDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var materialGroupParameter = materialGroup != null ?
                new ObjectParameter("MaterialGroup", materialGroup) :
                new ObjectParameter("MaterialGroup", typeof(string));
    
            var uOM1Parameter = uOM1 != null ?
                new ObjectParameter("UOM1", uOM1) :
                new ObjectParameter("UOM1", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var sacParameter = sac != null ?
                new ObjectParameter("sac", sac) :
                new ObjectParameter("sac", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var fridgeParameter = fridge.HasValue ?
                new ObjectParameter("fridge", fridge) :
                new ObjectParameter("fridge", typeof(int));
    
            var grossAmountParameter = grossAmount != null ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(string));
    
            var grossTotalParameter = grossTotal != null ?
                new ObjectParameter("GrossTotal", grossTotal) :
                new ObjectParameter("GrossTotal", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var gstAmtParameter = gstAmt.HasValue ?
                new ObjectParameter("gstAmt", gstAmt) :
                new ObjectParameter("gstAmt", typeof(int));
    
            var gstTotalParameter = gstTotal.HasValue ?
                new ObjectParameter("gstTotal", gstTotal) :
                new ObjectParameter("gstTotal", typeof(int));
    
            var vendorNParameter = vendorN != null ?
                new ObjectParameter("vendorN", vendorN) :
                new ObjectParameter("vendorN", typeof(string));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var purchaseIdParameter = purchaseId != null ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("rate", rate) :
                new ObjectParameter("rate", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var potypeParameter = potype.HasValue ?
                new ObjectParameter("potype", potype) :
                new ObjectParameter("potype", typeof(int));
    
            var entyDateParameter = entyDate.HasValue ?
                new ObjectParameter("entyDate", entyDate) :
                new ObjectParameter("entyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddPurchaseOrder", idParameter, codeParameter, materialNameParameter, materialGroupParameter, uOM1Parameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, qtyParameter, sacParameter, amountParameter, fridgeParameter, grossAmountParameter, grossTotalParameter, netAmountParameter, gstAmtParameter, gstTotalParameter, vendorNParameter, vendorIdParameter, purchaseIdParameter, rateParameter, quantityParameter, potypeParameter, entyDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AddQualityCheck(Nullable<int> id, string bomNo, string productCode, string reworkPass, Nullable<int> mat1, Nullable<int> mat2, Nullable<int> mat3, Nullable<int> mat4, Nullable<int> mat5, Nullable<int> mat6, Nullable<int> mat7, Nullable<int> mat8, Nullable<int> mat9, Nullable<int> mat10, string qcpass, string qcNo, string wip)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var bomNoParameter = bomNo != null ?
                new ObjectParameter("BomNo", bomNo) :
                new ObjectParameter("BomNo", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var reworkPassParameter = reworkPass != null ?
                new ObjectParameter("ReworkPass", reworkPass) :
                new ObjectParameter("ReworkPass", typeof(string));
    
            var mat1Parameter = mat1.HasValue ?
                new ObjectParameter("mat1", mat1) :
                new ObjectParameter("mat1", typeof(int));
    
            var mat2Parameter = mat2.HasValue ?
                new ObjectParameter("mat2", mat2) :
                new ObjectParameter("mat2", typeof(int));
    
            var mat3Parameter = mat3.HasValue ?
                new ObjectParameter("mat3", mat3) :
                new ObjectParameter("mat3", typeof(int));
    
            var mat4Parameter = mat4.HasValue ?
                new ObjectParameter("mat4", mat4) :
                new ObjectParameter("mat4", typeof(int));
    
            var mat5Parameter = mat5.HasValue ?
                new ObjectParameter("mat5", mat5) :
                new ObjectParameter("mat5", typeof(int));
    
            var mat6Parameter = mat6.HasValue ?
                new ObjectParameter("mat6", mat6) :
                new ObjectParameter("mat6", typeof(int));
    
            var mat7Parameter = mat7.HasValue ?
                new ObjectParameter("mat7", mat7) :
                new ObjectParameter("mat7", typeof(int));
    
            var mat8Parameter = mat8.HasValue ?
                new ObjectParameter("mat8", mat8) :
                new ObjectParameter("mat8", typeof(int));
    
            var mat9Parameter = mat9.HasValue ?
                new ObjectParameter("mat9", mat9) :
                new ObjectParameter("mat9", typeof(int));
    
            var mat10Parameter = mat10.HasValue ?
                new ObjectParameter("mat10", mat10) :
                new ObjectParameter("mat10", typeof(int));
    
            var qcpassParameter = qcpass != null ?
                new ObjectParameter("qcpass", qcpass) :
                new ObjectParameter("qcpass", typeof(string));
    
            var qcNoParameter = qcNo != null ?
                new ObjectParameter("qcNo", qcNo) :
                new ObjectParameter("qcNo", typeof(string));
    
            var wipParameter = wip != null ?
                new ObjectParameter("wip", wip) :
                new ObjectParameter("wip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AddQualityCheck", idParameter, bomNoParameter, productCodeParameter, reworkPassParameter, mat1Parameter, mat2Parameter, mat3Parameter, mat4Parameter, mat5Parameter, mat6Parameter, mat7Parameter, mat8Parameter, mat9Parameter, mat10Parameter, qcpassParameter, qcNoParameter, wipParameter);
        }
    
        public virtual int sp_AddSalesOrder(Nullable<int> id, Nullable<int> custId, string code, string productName, string remark, string type, string capacity_AMH, string color, string model, Nullable<int> tQtyPro, string indivisualPacking, Nullable<int> qtyIndivisual, string boxPacking, Nullable<int> qtyBox, Nullable<int> reqBox, Nullable<int> pacTypeId, string salesOrderNo, Nullable<int> pacTypeQty)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tQtyProParameter = tQtyPro.HasValue ?
                new ObjectParameter("TQtyPro", tQtyPro) :
                new ObjectParameter("TQtyPro", typeof(int));
    
            var indivisualPackingParameter = indivisualPacking != null ?
                new ObjectParameter("IndivisualPacking", indivisualPacking) :
                new ObjectParameter("IndivisualPacking", typeof(string));
    
            var qtyIndivisualParameter = qtyIndivisual.HasValue ?
                new ObjectParameter("QtyIndivisual", qtyIndivisual) :
                new ObjectParameter("QtyIndivisual", typeof(int));
    
            var boxPackingParameter = boxPacking != null ?
                new ObjectParameter("BoxPacking", boxPacking) :
                new ObjectParameter("BoxPacking", typeof(string));
    
            var qtyBoxParameter = qtyBox.HasValue ?
                new ObjectParameter("QtyBox", qtyBox) :
                new ObjectParameter("QtyBox", typeof(int));
    
            var reqBoxParameter = reqBox.HasValue ?
                new ObjectParameter("ReqBox", reqBox) :
                new ObjectParameter("ReqBox", typeof(int));
    
            var pacTypeIdParameter = pacTypeId.HasValue ?
                new ObjectParameter("pacTypeId", pacTypeId) :
                new ObjectParameter("pacTypeId", typeof(int));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("salesOrderNo", salesOrderNo) :
                new ObjectParameter("salesOrderNo", typeof(string));
    
            var pacTypeQtyParameter = pacTypeQty.HasValue ?
                new ObjectParameter("pacTypeQty", pacTypeQty) :
                new ObjectParameter("pacTypeQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddSalesOrder", idParameter, custIdParameter, codeParameter, productNameParameter, remarkParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, tQtyProParameter, indivisualPackingParameter, qtyIndivisualParameter, boxPackingParameter, qtyBoxParameter, reqBoxParameter, pacTypeIdParameter, salesOrderNoParameter, pacTypeQtyParameter);
        }
    
        public virtual int sp_AddStockTable(Nullable<int> id, string wipno, string jobno, string bomno, string location, string procode, string mat1, string mat2, string mat3, string mat4, string mat5, string mat6, string mat7, string mat8, string mat9, string mat10, string qcno, string qcpass, string rework, string qcrework, string custNo, string salesId, string prodSerialNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var procodeParameter = procode != null ?
                new ObjectParameter("procode", procode) :
                new ObjectParameter("procode", typeof(string));
    
            var mat1Parameter = mat1 != null ?
                new ObjectParameter("mat1", mat1) :
                new ObjectParameter("mat1", typeof(string));
    
            var mat2Parameter = mat2 != null ?
                new ObjectParameter("mat2", mat2) :
                new ObjectParameter("mat2", typeof(string));
    
            var mat3Parameter = mat3 != null ?
                new ObjectParameter("mat3", mat3) :
                new ObjectParameter("mat3", typeof(string));
    
            var mat4Parameter = mat4 != null ?
                new ObjectParameter("mat4", mat4) :
                new ObjectParameter("mat4", typeof(string));
    
            var mat5Parameter = mat5 != null ?
                new ObjectParameter("mat5", mat5) :
                new ObjectParameter("mat5", typeof(string));
    
            var mat6Parameter = mat6 != null ?
                new ObjectParameter("mat6", mat6) :
                new ObjectParameter("mat6", typeof(string));
    
            var mat7Parameter = mat7 != null ?
                new ObjectParameter("mat7", mat7) :
                new ObjectParameter("mat7", typeof(string));
    
            var mat8Parameter = mat8 != null ?
                new ObjectParameter("mat8", mat8) :
                new ObjectParameter("mat8", typeof(string));
    
            var mat9Parameter = mat9 != null ?
                new ObjectParameter("mat9", mat9) :
                new ObjectParameter("mat9", typeof(string));
    
            var mat10Parameter = mat10 != null ?
                new ObjectParameter("mat10", mat10) :
                new ObjectParameter("mat10", typeof(string));
    
            var qcnoParameter = qcno != null ?
                new ObjectParameter("qcno", qcno) :
                new ObjectParameter("qcno", typeof(string));
    
            var qcpassParameter = qcpass != null ?
                new ObjectParameter("qcpass", qcpass) :
                new ObjectParameter("qcpass", typeof(string));
    
            var reworkParameter = rework != null ?
                new ObjectParameter("rework", rework) :
                new ObjectParameter("rework", typeof(string));
    
            var qcreworkParameter = qcrework != null ?
                new ObjectParameter("qcrework", qcrework) :
                new ObjectParameter("qcrework", typeof(string));
    
            var custNoParameter = custNo != null ?
                new ObjectParameter("custNo", custNo) :
                new ObjectParameter("custNo", typeof(string));
    
            var salesIdParameter = salesId != null ?
                new ObjectParameter("salesId", salesId) :
                new ObjectParameter("salesId", typeof(string));
    
            var prodSerialNoParameter = prodSerialNo != null ?
                new ObjectParameter("prodSerialNo", prodSerialNo) :
                new ObjectParameter("prodSerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddStockTable", idParameter, wipnoParameter, jobnoParameter, bomnoParameter, locationParameter, procodeParameter, mat1Parameter, mat2Parameter, mat3Parameter, mat4Parameter, mat5Parameter, mat6Parameter, mat7Parameter, mat8Parameter, mat9Parameter, mat10Parameter, qcnoParameter, qcpassParameter, reworkParameter, qcreworkParameter, custNoParameter, salesIdParameter, prodSerialNoParameter);
        }
    
        public virtual int sp_AddWIP(Nullable<int> id, string code, string productName, string type, string capacity_AMH, string color, string model, Nullable<int> tQty, Nullable<int> sc, Nullable<int> ac, Nullable<int> wastQty, string wipno, string date, string bom, string jobno, Nullable<int> qtyAtLocation)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var capacity_AMHParameter = capacity_AMH != null ?
                new ObjectParameter("Capacity_AMH", capacity_AMH) :
                new ObjectParameter("Capacity_AMH", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var tQtyParameter = tQty.HasValue ?
                new ObjectParameter("TQty", tQty) :
                new ObjectParameter("TQty", typeof(int));
    
            var scParameter = sc.HasValue ?
                new ObjectParameter("sc", sc) :
                new ObjectParameter("sc", typeof(int));
    
            var acParameter = ac.HasValue ?
                new ObjectParameter("ac", ac) :
                new ObjectParameter("ac", typeof(int));
    
            var wastQtyParameter = wastQty.HasValue ?
                new ObjectParameter("wastQty", wastQty) :
                new ObjectParameter("wastQty", typeof(int));
    
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var bomParameter = bom != null ?
                new ObjectParameter("bom", bom) :
                new ObjectParameter("bom", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var qtyAtLocationParameter = qtyAtLocation.HasValue ?
                new ObjectParameter("QtyAtLocation", qtyAtLocation) :
                new ObjectParameter("QtyAtLocation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddWIP", idParameter, codeParameter, productNameParameter, typeParameter, capacity_AMHParameter, colorParameter, modelParameter, tQtyParameter, scParameter, acParameter, wastQtyParameter, wipnoParameter, dateParameter, bomParameter, jobnoParameter, qtyAtLocationParameter);
        }
    
        public virtual ObjectResult<sp_AgaintReorderTypwRM_Result> sp_AgaintReorderTypwRM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AgaintReorderTypwRM_Result>("sp_AgaintReorderTypwRM");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CheckLocationfromStockTable(string jobno, string bom, string wip)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var bomParameter = bom != null ?
                new ObjectParameter("bom", bom) :
                new ObjectParameter("bom", typeof(string));
    
            var wipParameter = wip != null ?
                new ObjectParameter("wip", wip) :
                new ObjectParameter("wip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CheckLocationfromStockTable", jobnoParameter, bomParameter, wipParameter);
        }
    
        public virtual ObjectResult<sp_geMatIssueSlip_Result> sp_geMatIssueSlip()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_geMatIssueSlip_Result>("sp_geMatIssueSlip");
        }
    
        public virtual ObjectResult<sp_getAllBomOnMasterProCode_Result> sp_getAllBomOnMasterProCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllBomOnMasterProCode_Result>("sp_getAllBomOnMasterProCode", codeParameter);
        }
    
        public virtual ObjectResult<string> sp_getAllBomOnMasterProCodeNoId(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getAllBomOnMasterProCodeNoId", codeParameter);
        }
    
        public virtual ObjectResult<sp_getAllFromMatRequsitionBymrsNo_Result> sp_getAllFromMatRequsitionBymrsNo(string mrsId, string date)
        {
            var mrsIdParameter = mrsId != null ?
                new ObjectParameter("mrsId", mrsId) :
                new ObjectParameter("mrsId", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllFromMatRequsitionBymrsNo_Result>("sp_getAllFromMatRequsitionBymrsNo", mrsIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<sp_getAppCode_Result> sp_getAppCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAppCode_Result>("sp_getAppCode");
        }
    
        public virtual ObjectResult<string> sp_getBomDetails(string bomcode)
        {
            var bomcodeParameter = bomcode != null ?
                new ObjectParameter("bomcode", bomcode) :
                new ObjectParameter("bomcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getBomDetails", bomcodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getBOMId(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getBOMId", codeParameter);
        }
    
        public virtual ObjectResult<sp_getBomOfLastGenerated_Result> sp_getBomOfLastGenerated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getBomOfLastGenerated_Result>("sp_getBomOfLastGenerated");
        }
    
        public virtual ObjectResult<sp_GetCodeByMatPlanningNo_Result> sp_GetCodeByMatPlanningNo(string mpn)
        {
            var mpnParameter = mpn != null ?
                new ObjectParameter("mpn", mpn) :
                new ObjectParameter("mpn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCodeByMatPlanningNo_Result>("sp_GetCodeByMatPlanningNo", mpnParameter);
        }
    
        public virtual ObjectResult<sp_GetDataInMatRequsition_Result> sp_GetDataInMatRequsition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataInMatRequsition_Result>("sp_GetDataInMatRequsition");
        }
    
        public virtual ObjectResult<sp_getDataOfPakingType_Result> sp_getDataOfPakingType(string jobNo)
        {
            var jobNoParameter = jobNo != null ?
                new ObjectParameter("jobNo", jobNo) :
                new ObjectParameter("jobNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDataOfPakingType_Result>("sp_getDataOfPakingType", jobNoParameter);
        }
    
        public virtual ObjectResult<sp_getDataOfPakingTypeBox_Result> sp_getDataOfPakingTypeBox(string jobNo)
        {
            var jobNoParameter = jobNo != null ?
                new ObjectParameter("jobNo", jobNo) :
                new ObjectParameter("jobNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDataOfPakingTypeBox_Result>("sp_getDataOfPakingTypeBox", jobNoParameter);
        }
    
        public virtual int sp_getFGBYCode(ObjectParameter json, string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getFGBYCode", json, codeParameter);
        }
    
        public virtual int sp_getFGBYFGstocks(ObjectParameter json, string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_getFGBYFGstocks", json, codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getGRNIdByVendorId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getGRNIdByVendorId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getIssuedQty(string jobno, string code)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getIssuedQty", jobnoParameter, codeParameter);
        }
    
        public virtual ObjectResult<string> sp_getJff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getJff");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getjobId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getjobId");
        }
    
        public virtual ObjectResult<string> sp_getJobSheetInMatPlan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getJobSheetInMatPlan");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getLastJobId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getLastJobId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getMislipId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getMislipId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getMrsId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getMrsId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getMrslipId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getMrslipId");
        }
    
        public virtual ObjectResult<sp_getPackingMaterialIfBoxPacYes_Result> sp_getPackingMaterialIfBoxPacYes(string jobno)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPackingMaterialIfBoxPacYes_Result>("sp_getPackingMaterialIfBoxPacYes", jobnoParameter);
        }
    
        public virtual ObjectResult<sp_getPackingMaterialIfIndiPacYes_Result> sp_getPackingMaterialIfIndiPacYes(string jobno)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPackingMaterialIfIndiPacYes_Result>("sp_getPackingMaterialIfIndiPacYes", jobnoParameter);
        }
    
        public virtual ObjectResult<sp_getPobyCode_Result> sp_getPobyCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getPobyCode_Result>("sp_getPobyCode", codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getPOIdByVendorId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getPOIdByVendorId");
        }
    
        public virtual ObjectResult<sp_getProcode_Result> sp_getProcode(string jobno, string wipno, string bomno)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getProcode_Result>("sp_getProcode", jobnoParameter, wipnoParameter, bomnoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getQtyByCodeId(string code, Nullable<int> id)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getQtyByCodeId", codeParameter, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getQualityId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getQualityId");
        }
    
        public virtual ObjectResult<string> sp_getRmCodeFromBom(string masterCode)
        {
            var masterCodeParameter = masterCode != null ?
                new ObjectParameter("masterCode", masterCode) :
                new ObjectParameter("masterCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_getRmCodeFromBom", masterCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getSalesOrderId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getSalesOrderId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockFromFg(string procode)
        {
            var procodeParameter = procode != null ?
                new ObjectParameter("procode", procode) :
                new ObjectParameter("procode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockFromFg", procodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockFromRawMat(string procode)
        {
            var procodeParameter = procode != null ?
                new ObjectParameter("procode", procode) :
                new ObjectParameter("procode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockFromRawMat", procodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockId(string code, Nullable<int> cid)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("Cid", cid) :
                new ObjectParameter("Cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockId", codeParameter, cidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockMasterProcodeId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockMasterProcodeId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockProductCodeId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockProductCodeId");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockQtyFromRawMatCreation(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockQtyFromRawMatCreation", codeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getStockQtyFromRMByCode(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getStockQtyFromRMByCode", codeParameter);
        }
    
        public virtual ObjectResult<sp_getWasteFromMatPlanningInRequsition_Result> sp_getWasteFromMatPlanningInRequsition(string job)
        {
            var jobParameter = job != null ?
                new ObjectParameter("job", job) :
                new ObjectParameter("job", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getWasteFromMatPlanningInRequsition_Result>("sp_getWasteFromMatPlanningInRequsition", jobParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_getWipId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_getWipId");
        }
    
        public virtual ObjectResult<sp_IsdataAddedInMatReq_Result> sp_IsdataAddedInMatReq(string jonno)
        {
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IsdataAddedInMatReq_Result>("sp_IsdataAddedInMatReq", jonnoParameter);
        }
    
        public virtual ObjectResult<sp_IsdataAddedInMatRequsition_Result> sp_IsdataAddedInMatRequsition(string mrs)
        {
            var mrsParameter = mrs != null ?
                new ObjectParameter("mrs", mrs) :
                new ObjectParameter("mrs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IsdataAddedInMatRequsition_Result>("sp_IsdataAddedInMatRequsition", mrsParameter);
        }
    
        public virtual ObjectResult<sp_IsdataAddedInMatRequsitionAll_Result> sp_IsdataAddedInMatRequsitionAll(string mrs)
        {
            var mrsParameter = mrs != null ?
                new ObjectParameter("mrs", mrs) :
                new ObjectParameter("mrs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IsdataAddedInMatRequsitionAll_Result>("sp_IsdataAddedInMatRequsitionAll", mrsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_IsQtyOver()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_IsQtyOver");
        }
    
        public virtual ObjectResult<sp_lASTiNSERTEDfG_Result> sp_lASTiNSERTEDfG()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_lASTiNSERTEDfG_Result>("sp_lASTiNSERTEDfG");
        }
    
        public virtual int sp_truncateFg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_truncateFg");
        }
    
        public virtual int sp_TruncateZeroQty()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TruncateZeroQty");
        }
    
        public virtual ObjectResult<sp_UniqueBOM_Result> sp_UniqueBOM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UniqueBOM_Result>("sp_UniqueBOM");
        }
    
        public virtual ObjectResult<sp_UniqueMatPlanningForAgainstPO_Result> sp_UniqueMatPlanningForAgainstPO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UniqueMatPlanningForAgainstPO_Result>("sp_UniqueMatPlanningForAgainstPO");
        }
    
        public virtual ObjectResult<string> sp_UniquePurId(Nullable<int> venId)
        {
            var venIdParameter = venId.HasValue ?
                new ObjectParameter("venId", venId) :
                new ObjectParameter("venId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UniquePurId", venIdParameter);
        }
    
        public virtual ObjectResult<sp_UniqueWipFromStocktable_Result> sp_UniqueWipFromStocktable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UniqueWipFromStocktable_Result>("sp_UniqueWipFromStocktable");
        }
    
        public virtual ObjectResult<sp_UniqueWipFromStocktableForRework_Result> sp_UniqueWipFromStocktableForRework()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UniqueWipFromStocktableForRework_Result>("sp_UniqueWipFromStocktableForRework");
        }
    
        public virtual int sp_updateBalQty(string jobsno, string matname, string code, Nullable<int> mrswastqty, Nullable<int> mrsreqwastqty, Nullable<int> mrsreqqty, Nullable<int> mrsbalqtyreq)
        {
            var jobsnoParameter = jobsno != null ?
                new ObjectParameter("jobsno", jobsno) :
                new ObjectParameter("jobsno", typeof(string));
    
            var matnameParameter = matname != null ?
                new ObjectParameter("matname", matname) :
                new ObjectParameter("matname", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var mrswastqtyParameter = mrswastqty.HasValue ?
                new ObjectParameter("mrswastqty", mrswastqty) :
                new ObjectParameter("mrswastqty", typeof(int));
    
            var mrsreqwastqtyParameter = mrsreqwastqty.HasValue ?
                new ObjectParameter("mrsreqwastqty", mrsreqwastqty) :
                new ObjectParameter("mrsreqwastqty", typeof(int));
    
            var mrsreqqtyParameter = mrsreqqty.HasValue ?
                new ObjectParameter("mrsreqqty", mrsreqqty) :
                new ObjectParameter("mrsreqqty", typeof(int));
    
            var mrsbalqtyreqParameter = mrsbalqtyreq.HasValue ?
                new ObjectParameter("mrsbalqtyreq", mrsbalqtyreq) :
                new ObjectParameter("mrsbalqtyreq", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateBalQty", jobsnoParameter, matnameParameter, codeParameter, mrswastqtyParameter, mrsreqwastqtyParameter, mrsreqqtyParameter, mrsbalqtyreqParameter);
        }
    
        public virtual int sp_updateBalQtyInMRSFromMis(string jobsno, string matname, string code, string bomNon, string mrsno, Nullable<int> misYtd, Nullable<int> misQtyIssue, Nullable<int> misbalQty)
        {
            var jobsnoParameter = jobsno != null ?
                new ObjectParameter("jobsno", jobsno) :
                new ObjectParameter("jobsno", typeof(string));
    
            var matnameParameter = matname != null ?
                new ObjectParameter("matname", matname) :
                new ObjectParameter("matname", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var bomNonParameter = bomNon != null ?
                new ObjectParameter("bomNon", bomNon) :
                new ObjectParameter("bomNon", typeof(string));
    
            var mrsnoParameter = mrsno != null ?
                new ObjectParameter("mrsno", mrsno) :
                new ObjectParameter("mrsno", typeof(string));
    
            var misYtdParameter = misYtd.HasValue ?
                new ObjectParameter("misYtd", misYtd) :
                new ObjectParameter("misYtd", typeof(int));
    
            var misQtyIssueParameter = misQtyIssue.HasValue ?
                new ObjectParameter("misQtyIssue", misQtyIssue) :
                new ObjectParameter("misQtyIssue", typeof(int));
    
            var misbalQtyParameter = misbalQty.HasValue ?
                new ObjectParameter("misbalQty", misbalQty) :
                new ObjectParameter("misbalQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateBalQtyInMRSFromMis", jobsnoParameter, matnameParameter, codeParameter, bomNonParameter, mrsnoParameter, misYtdParameter, misQtyIssueParameter, misbalQtyParameter);
        }
    
        public virtual int sp_UpdateDSJobNoFromJobSheet(string productcode, string salesNo, string jobno)
        {
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var salesNoParameter = salesNo != null ?
                new ObjectParameter("salesNo", salesNo) :
                new ObjectParameter("salesNo", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateDSJobNoFromJobSheet", productcodeParameter, salesNoParameter, jobnoParameter);
        }
    
        public virtual int sp_UpdateIssuedQty(string jobno, string code, Nullable<int> qty)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateIssuedQty", jobnoParameter, codeParameter, qtyParameter);
        }
    
        public virtual int sp_UpdatePackingJobNoFromJobSheet(string productcode, string salesNo, string jobno)
        {
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var salesNoParameter = salesNo != null ?
                new ObjectParameter("salesNo", salesNo) :
                new ObjectParameter("salesNo", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePackingJobNoFromJobSheet", productcodeParameter, salesNoParameter, jobnoParameter);
        }
    
        public virtual int sp_UpdatePoFlagInMatPlanning(string mpno)
        {
            var mpnoParameter = mpno != null ?
                new ObjectParameter("mpno", mpno) :
                new ObjectParameter("mpno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePoFlagInMatPlanning", mpnoParameter);
        }
    
        public virtual int sp_UpdateQtyInFgStock(string code, Nullable<int> qty)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateQtyInFgStock", codeParameter, qtyParameter);
        }
    
        public virtual int sp_UpdateQtyInFinishedFoods(string code, Nullable<int> qty)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateQtyInFinishedFoods", codeParameter, qtyParameter);
        }
    
        public virtual int sp_UpdateStockInRawMat(string code, string updatedQty)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var updatedQtyParameter = updatedQty != null ?
                new ObjectParameter("updatedQty", updatedQty) :
                new ObjectParameter("updatedQty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockInRawMat", codeParameter, updatedQtyParameter);
        }
    
        public virtual int sp_UpdateStockInStockTableFromSalesOrder(string productcode, string salesNo, Nullable<int> qtyToUpdate, string proSerialCode, Nullable<int> cid)
        {
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var salesNoParameter = salesNo != null ?
                new ObjectParameter("salesNo", salesNo) :
                new ObjectParameter("salesNo", typeof(string));
    
            var qtyToUpdateParameter = qtyToUpdate.HasValue ?
                new ObjectParameter("qtyToUpdate", qtyToUpdate) :
                new ObjectParameter("qtyToUpdate", typeof(int));
    
            var proSerialCodeParameter = proSerialCode != null ?
                new ObjectParameter("proSerialCode", proSerialCode) :
                new ObjectParameter("proSerialCode", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockInStockTableFromSalesOrder", productcodeParameter, salesNoParameter, qtyToUpdateParameter, proSerialCodeParameter, cidParameter);
        }
    
        public virtual int sp_UpdateStockTable(string jobno, Nullable<int> location, Nullable<int> fromloc, string serialno)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var fromlocParameter = fromloc.HasValue ?
                new ObjectParameter("fromloc", fromloc) :
                new ObjectParameter("fromloc", typeof(int));
    
            var serialnoParameter = serialno != null ?
                new ObjectParameter("serialno", serialno) :
                new ObjectParameter("serialno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTable", jobnoParameter, locationParameter, fromlocParameter, serialnoParameter);
        }
    
        public virtual int sp_UpdateStockTableAfterQCRework(string wipno, string procodeSerialNo, string qcrework)
        {
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var procodeSerialNoParameter = procodeSerialNo != null ?
                new ObjectParameter("procodeSerialNo", procodeSerialNo) :
                new ObjectParameter("procodeSerialNo", typeof(string));
    
            var qcreworkParameter = qcrework != null ?
                new ObjectParameter("qcrework", qcrework) :
                new ObjectParameter("qcrework", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTableAfterQCRework", wipnoParameter, procodeSerialNoParameter, qcreworkParameter);
        }
    
        public virtual int sp_UpdateStockTableAfterQualitycheck(string jobno, string wipno, string procodeSerialNo, string qCNo, string qcpass, Nullable<int> mat1, Nullable<int> mat2, Nullable<int> mat3, Nullable<int> mat4, Nullable<int> mat5, Nullable<int> mat6, Nullable<int> mat7, Nullable<int> mat8, Nullable<int> mat9, Nullable<int> mat10)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var procodeSerialNoParameter = procodeSerialNo != null ?
                new ObjectParameter("procodeSerialNo", procodeSerialNo) :
                new ObjectParameter("procodeSerialNo", typeof(string));
    
            var qCNoParameter = qCNo != null ?
                new ObjectParameter("qCNo", qCNo) :
                new ObjectParameter("qCNo", typeof(string));
    
            var qcpassParameter = qcpass != null ?
                new ObjectParameter("qcpass", qcpass) :
                new ObjectParameter("qcpass", typeof(string));
    
            var mat1Parameter = mat1.HasValue ?
                new ObjectParameter("mat1", mat1) :
                new ObjectParameter("mat1", typeof(int));
    
            var mat2Parameter = mat2.HasValue ?
                new ObjectParameter("mat2", mat2) :
                new ObjectParameter("mat2", typeof(int));
    
            var mat3Parameter = mat3.HasValue ?
                new ObjectParameter("mat3", mat3) :
                new ObjectParameter("mat3", typeof(int));
    
            var mat4Parameter = mat4.HasValue ?
                new ObjectParameter("mat4", mat4) :
                new ObjectParameter("mat4", typeof(int));
    
            var mat5Parameter = mat5.HasValue ?
                new ObjectParameter("mat5", mat5) :
                new ObjectParameter("mat5", typeof(int));
    
            var mat6Parameter = mat6.HasValue ?
                new ObjectParameter("mat6", mat6) :
                new ObjectParameter("mat6", typeof(int));
    
            var mat7Parameter = mat7.HasValue ?
                new ObjectParameter("mat7", mat7) :
                new ObjectParameter("mat7", typeof(int));
    
            var mat8Parameter = mat8.HasValue ?
                new ObjectParameter("mat8", mat8) :
                new ObjectParameter("mat8", typeof(int));
    
            var mat9Parameter = mat9.HasValue ?
                new ObjectParameter("mat9", mat9) :
                new ObjectParameter("mat9", typeof(int));
    
            var mat10Parameter = mat10.HasValue ?
                new ObjectParameter("mat10", mat10) :
                new ObjectParameter("mat10", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTableAfterQualitycheck", jobnoParameter, wipnoParameter, procodeSerialNoParameter, qCNoParameter, qcpassParameter, mat1Parameter, mat2Parameter, mat3Parameter, mat4Parameter, mat5Parameter, mat6Parameter, mat7Parameter, mat8Parameter, mat9Parameter, mat10Parameter);
        }
    
        public virtual int sp_UpdateStockTableAfterRework(string wipno, string procodeSerialNo, string rework)
        {
            var wipnoParameter = wipno != null ?
                new ObjectParameter("wipno", wipno) :
                new ObjectParameter("wipno", typeof(string));
    
            var procodeSerialNoParameter = procodeSerialNo != null ?
                new ObjectParameter("procodeSerialNo", procodeSerialNo) :
                new ObjectParameter("procodeSerialNo", typeof(string));
    
            var reworkParameter = rework != null ?
                new ObjectParameter("rework", rework) :
                new ObjectParameter("rework", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTableAfterRework", wipnoParameter, procodeSerialNoParameter, reworkParameter);
        }
    
        public virtual int sp_UpdateStockTableFromJobSheet(string productcode, string salesNo, string jobno)
        {
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var salesNoParameter = salesNo != null ?
                new ObjectParameter("salesNo", salesNo) :
                new ObjectParameter("salesNo", typeof(string));
    
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTableFromJobSheet", productcodeParameter, salesNoParameter, jobnoParameter);
        }
    
        public virtual int sp_UpdateStockTablePacking(string jobno, string procodeSerialNo, string indPac, string boxPac, Nullable<int> location)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var procodeSerialNoParameter = procodeSerialNo != null ?
                new ObjectParameter("procodeSerialNo", procodeSerialNo) :
                new ObjectParameter("procodeSerialNo", typeof(string));
    
            var indPacParameter = indPac != null ?
                new ObjectParameter("indPac", indPac) :
                new ObjectParameter("indPac", typeof(string));
    
            var boxPacParameter = boxPac != null ?
                new ObjectParameter("boxPac", boxPac) :
                new ObjectParameter("boxPac", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStockTablePacking", jobnoParameter, procodeSerialNoParameter, indPacParameter, boxPacParameter, locationParameter);
        }
    
        public virtual int UpdateBomJobInSO(string jobno, string bomno, string salesno, string code)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            var salesnoParameter = salesno != null ?
                new ObjectParameter("salesno", salesno) :
                new ObjectParameter("salesno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBomJobInSO", jobnoParameter, bomnoParameter, salesnoParameter, codeParameter);
        }
    
        public virtual int UpdateQtyInJobSheet(string jonno, string code, Nullable<int> remQty)
        {
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var remQtyParameter = remQty.HasValue ?
                new ObjectParameter("remQty", remQty) :
                new ObjectParameter("remQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQtyInJobSheet", jonnoParameter, codeParameter, remQtyParameter);
        }
    
        public virtual int UpdateQtyInJobSheets(string jobno, string salesId, Nullable<int> remQty, string procode, string bomno)
        {
            var jobnoParameter = jobno != null ?
                new ObjectParameter("jobno", jobno) :
                new ObjectParameter("jobno", typeof(string));
    
            var salesIdParameter = salesId != null ?
                new ObjectParameter("salesId", salesId) :
                new ObjectParameter("salesId", typeof(string));
    
            var remQtyParameter = remQty.HasValue ?
                new ObjectParameter("RemQty", remQty) :
                new ObjectParameter("RemQty", typeof(int));
    
            var procodeParameter = procode != null ?
                new ObjectParameter("procode", procode) :
                new ObjectParameter("procode", typeof(string));
    
            var bomnoParameter = bomno != null ?
                new ObjectParameter("bomno", bomno) :
                new ObjectParameter("bomno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQtyInJobSheets", jobnoParameter, salesIdParameter, remQtyParameter, procodeParameter, bomnoParameter);
        }
    
        public virtual int UpdateQtyInPo(Nullable<int> vendorId, string code, Nullable<int> remQty, string purId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("vendorId", vendorId) :
                new ObjectParameter("vendorId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var remQtyParameter = remQty.HasValue ?
                new ObjectParameter("RemQty", remQty) :
                new ObjectParameter("RemQty", typeof(int));
    
            var purIdParameter = purId != null ?
                new ObjectParameter("purId", purId) :
                new ObjectParameter("purId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQtyInPo", vendorIdParameter, codeParameter, remQtyParameter, purIdParameter);
        }
    
        public virtual int UpdateQtyInSOPacking(string code, Nullable<int> remQty)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var remQtyParameter = remQty.HasValue ?
                new ObjectParameter("remQty", remQty) :
                new ObjectParameter("remQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQtyInSOPacking", codeParameter, remQtyParameter);
        }
    
        public virtual int UpdateQtyToProduceInSalesOrder(string salesOrder, string productCode, Nullable<int> qty)
        {
            var salesOrderParameter = salesOrder != null ?
                new ObjectParameter("salesOrder", salesOrder) :
                new ObjectParameter("salesOrder", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateQtyToProduceInSalesOrder", salesOrderParameter, productCodeParameter, qtyParameter);
        }
    
        public virtual int UpdateStatusInSalesOrder(string sono, string code, Nullable<int> cid, Nullable<bool> status)
        {
            var sonoParameter = sono != null ?
                new ObjectParameter("sono", sono) :
                new ObjectParameter("sono", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusInSalesOrder", sonoParameter, codeParameter, cidParameter, statusParameter);
        }
    
        public virtual int UpdateStatusInSalesOrderFromMatIssueSlip(string jonno, string bom, Nullable<bool> status)
        {
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomParameter = bom != null ?
                new ObjectParameter("bom", bom) :
                new ObjectParameter("bom", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusInSalesOrderFromMatIssueSlip", jonnoParameter, bomParameter, statusParameter);
        }
    
        public virtual int UpdateStatusInSalesOrderFromMatPlanning(string sono, string code, string jonno, string bom, Nullable<bool> status)
        {
            var sonoParameter = sono != null ?
                new ObjectParameter("sono", sono) :
                new ObjectParameter("sono", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var jonnoParameter = jonno != null ?
                new ObjectParameter("jonno", jonno) :
                new ObjectParameter("jonno", typeof(string));
    
            var bomParameter = bom != null ?
                new ObjectParameter("bom", bom) :
                new ObjectParameter("bom", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusInSalesOrderFromMatPlanning", sonoParameter, codeParameter, jonnoParameter, bomParameter, statusParameter);
        }
    }
}
